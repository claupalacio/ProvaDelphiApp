unit uGeraSql_Controller;

interface

uses
  uIGeraSql_Interface, Vcl.StdCtrls, System.Classes;

type
  TGeraSql = class(TInterfacedObject, IGeraSql)

    FColunas   : TMemo;
    FTabela    : TMemo;
    FCondicoes : TMemo;

    public
	    procedure SetColunas(Colunas: TMemo);
      procedure SetTabela(Tabela: TMemo);
      procedure SetCondicoes(Condicoes: TMemo);
      function  GeraSQL : TStringList;
  end;

implementation

{ TGeraSql }

function TGeraSql.GeraSQL: TStringList;
var
  s : String;
  spCondicoes : TStringList;
  spColunas   : TStringList;
  spTabelas   : TStringList;
  spSQL       : TStringList;
begin

  spSQL       := TStringList.Create;
  spColunas   := TStringList.Create;
  spTabelas   := TStringList.Create;
  spCondicoes := TStringList.Create;

  spColunas.AddStrings(FColunas.Lines);
  spTabelas.AddStrings(FTabela.Lines);
  spCondicoes.AddStrings(FCondicoes.Lines);

  spSQL.add('select');

  for s in spColunas do
  begin
    if spSQL.Count = 1 then
      spSQL.add('  ' + s )
    else
      spSQL.add(' ,' + s);

  end;

  spSQL.add('from');
  for s in spTabelas do
    spSQL.add('  ' + s );

  spSQL.add('where 1 = 1 ');
  for s in spCondicoes do
    spSQL.add('   and ' + s);

  Result := spSQL;

end;

procedure TGeraSql.SetColunas(Colunas: TMemo);
begin
  FColunas := Colunas;
end;

procedure TGeraSql.SetCondicoes(Condicoes: TMemo);
begin
  FCondicoes := Condicoes;
end;

procedure TGeraSql.SetTabela(Tabela: TMemo);
begin
  FTabela := Tabela;
end;

end.
